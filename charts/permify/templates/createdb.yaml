{{- if eq .Values.jobs.createDatabase.enabled }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "create-database-{{ .Release.Name }}"
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  ttlSecondsAfterFinished: 500
  template:
    metadata:
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    spec:
      containers:
      - name: create-database
        image: postgres:11-alpine # A relatively small official image that can run psql
        command:
          - sh
          - -c
          - >
              while ! pg_isready -U postgres -h ${DBHOST} -p ${DBPORT}; do sleep 1; done;

              DB_EXISTS=$(psql "${DBURI}" -tAc "SELECT 1 FROM pg_database WHERE datname='${DBNAME}'")
              
              if [ "$DB_EXISTS" != "1" ]; then
                psql "${DBURI}" -c "CREATE DATABASE \"${DBNAME}\""
              fi
        env:
        - name: DBNAME
          value: {{ .Values.jobs.createDatabase.name | quote }}
        - name: DBHOST
          value: {{ .Values.jobs.createDatabase.host | quote }}
        - name: DBPORT
          value: {{ .Values.jobs.createDatabase.port | quote }}
        - name: DBURI
          value: {{ .Values.jobs.createDatabase.uri | quote }}
      restartPolicy: OnFailure
  backoffLimit: 2
...
{{ end }}
